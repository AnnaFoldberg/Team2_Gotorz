@page "/flights"
@using Gotorz.Shared.DTO
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@using Gotorz.Client.Services
@using Gotorz.Client.ViewModels
@inject IFlightService FlightService
@inject ILogger<Flights> Logger

<EditForm Model="@searchForm" OnValidSubmit="SearchAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="d-flex gap-2 align-items-end">
            <div class="form-group flex-grow-1">
                <label for="departureAirport" class="form-label">Departure Airport</label>
                <InputText class="form-control" id="departureAirport" @bind-Value="searchForm.DepartureAirport" list="departure-options" />
                <datalist id="departure-options">
                    @foreach (var airport in airports)
                    {
                        <option value="@airport.LocalizedName"></option>
                    }
                </datalist>
            </div>
            <div class="form-group flex-grow-1">
                <label for="arrivalAirport" class="form-label">Arrival Airport</label>
                <InputText class="form-control" id="arrivalAirport" @bind-Value="searchForm.ArrivalAirport" list="arrival-options" />
                <datalist id="arrival-options">
                    @foreach (var airport in airports)
                    {
                        <option value="@airport.LocalizedName"></option>
                    }
                </datalist>
            </div>
            <div class="form-group flex-grow-1">
                <label for="date" class="form-label">Date (optional)</label>
                <InputText class="form-control" id="date" @bind-Value="searchForm.Date" placeholder="dd-MM-yyyy" />
            </div>
            <div class="form-group flex-grow-1">
                <button type="submit" class="btn icon-white h-100 custom-background text-white bi bi-search"></button>
            </div>
        </div>
    </div>
</EditForm>

<br><br>

@if (flights != null && searchPerformed)
{
    if (flights.Any())
    {
        <ul class="list-group">
            <li class="list-group-item d-flex justify-content-between align-items-center text-white custom-background">
                <span class="col">Date</span>
                <span class="col">Departure</span>
                <span class="col">Arrival</span>
            </li>

            @foreach (var flight in flights)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center" >
                    <span class="col">@flight.DepartureDate.ToString("dd-MM-yyyy")</span>
                    <span class="col">@flight.DepartureAirport.LocalizedName</span>
                    <span class="col">@flight.ArrivalAirport.LocalizedName</span>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No flights were found</p>
    }
}

@code {
    private bool searchPerformed = false;
    private SearchForm searchForm = new SearchForm();
    private IEnumerable<AirportDto> airports = Enumerable.Empty<AirportDto>();
    private List<FlightDto>? flights = new List<FlightDto>();

    protected override async Task OnInitializedAsync()
    {
        airports = await FlightService.GetAllAirportsAsync();
    }

    private async Task SearchAsync()
    {
        try
        {
            var result = await FlightService.GetFlightsAsync(searchForm.Date, searchForm.DepartureAirport, searchForm.ArrivalAirport);

            if (result == null)
            {
                flights = new List<FlightDto>();
                return;
            }

            flights = result;

            airports = await FlightService.GetAllAirportsAsync();

            searchPerformed = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching flights");
        }
    }
}