@page "/booking/customer/holiday-bookings"
@using Gotorz.Client.Components
@using Gotorz.Shared.DTOs
@using Gotorz.Shared.Enums;
@using Gotorz.Client.Services
@using Microsoft.AspNetCore.Authorization
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IBookingService BookingService
@inject ILogger<HolidayBooking> Logger
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized Context="auth">
        @if (!isAuthorizedUser)
        {
          <p>Page not found.</p>
        }
        else if (holidayBookings == null)
        {
          <p>Loading...</p>
        }
        else
        {
          <div class="container d-flex flex-column standard-page-wrapper ">
            <h3>Holiday Bookings</h3>
            <br>
            @foreach (HolidayBookingDto holidayBooking in holidayBookings)
            {
                <div class="p-3 border rounded bg-white shadow">
                <HolidayBooking BookingReference="@holidayBooking.BookingReference" />
                <br><br>
                @if (isSales)
                {
                    <div class="container mt-auto mb-4">
                        <div class="d-flex justify-content-between align-items-center p-3">
                            <p class="mb-0 flex-grow-1"></p>
                            <button type="button" class="btn btn-light custom-background text-white"
                                @onclick="() => NavigateToHolidayBooking(holidayBooking.BookingReference)">Edit</button>
                        </div>
                    </div>
                }
                </div>
                <br><br><br>
            }
          </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="mt-5 standard-page-wrapper">
            <Login/>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isAuthorizedUser;
    private bool isSales;
    private IEnumerable<HolidayBookingDto> holidayBookings;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(UserId))
            {
                var currentUser = await UserService.GetCurrentUserAsync();
                UserId = currentUser.UserId;
            }

            holidayBookings = await BookingService.GetCustomerHolidayBookingsAsync(UserId);

            if (holidayBookings == null) return;

            isSales = await UserService.IsUserInRoleAsync("sales");

            isAuthorizedUser = ((await UserService.IsUserInRoleAsync("customer")) &&
                holidayBookings.First().Customer.UserId == UserId) ||
                isSales ||
                await UserService.IsUserInRoleAsync("admin");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing customer's holiday bookings");
        }
    }
    private async Task NavigateToHolidayBooking(string bookingReference)
    {
        string from = $"customer/holiday-bookings?UserId={UserId}";
        Navigation.NavigateTo($"/booking/holiday-booking/{bookingReference}/edit/?From={Uri.EscapeDataString(from)}");
    }
}