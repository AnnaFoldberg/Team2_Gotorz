@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IUserService UserService
@using Gotorz.Client.Services
@using Gotorz.Shared.DTOs

<PageTitle>Login</PageTitle>

@if (checkingAuth){}
else
{
    <h3 class="text-center mb-4">Login</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger text-center">@ErrorMessage</div>
    }
    <div class="d-flex justify-content-center mt-5">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="p-4 rounded border shadow" style="min-width: 350px;">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <div class="input-group">
                    <InputText id="password" 
                    @bind-Value="loginModel.Password" 
                    class="form-control" 
                    type="@(showPassword ? "text" : "password")" />
                    <button type="button" 
                    class="btn btn-outline-secondary" 
                    @onclick="TogglePasswordVisibility"
                    tabindex="-1">
                        <i class="bi @( showPassword ? "bi-eye" : "bi-eye-slash")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>


            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>
    </div>
}

@code {
    private LoginDto loginModel = new();
    private string? ErrorMessage;
    private bool showPassword = false;
    private bool checkingAuth = true;

    private void TogglePasswordVisibility() => showPassword = !showPassword;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            Navigation.NavigateTo("/", true);
            return;
        }
        checkingAuth = false;
    }

    private async Task HandleLogin()
    {
        (bool success, string? error) = await UserService.LoginAsync(loginModel);

        if (success)
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            ErrorMessage = error;
        }
    }
}
