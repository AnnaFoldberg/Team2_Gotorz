@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@using Gotorz.Client.Services
@using Gotorz.Shared.DTOs

@if (isCheckingAccess) {}
else
{
	<PageTitle>Register</PageTitle>
	<h3 class="text-center mb-4">Register</h3>

	@if (!string.IsNullOrEmpty(ErrorMessage))
	{
		<div class="alert alert-danger text-center">@ErrorMessage</div>
	}

	<div class="d-flex justify-content-center mt-5">
		<EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="p-4 rounded border shadow" style="min-width: 350px;">
			<DataAnnotationsValidator />
			<div class="mb-3">
				<label for="email" class="form-label">Email</label>
				<InputText id="email" @bind-Value="registerModel.Email" class="form-control" placeholder="Email" />
				<ValidationMessage For="@(() => registerModel.Email)" />
			</div>

			<div class="mb-3">
				<label for="password" class="form-label">Password</label>
				<div class="input-group">
					<InputText id="password"
							   @bind-Value="registerModel.Password"
							   class="form-control"
							   placeholder="Kodeord"
							   type="@(showPassword ? "text" : "password")" />

					<button type="button"
							class="btn btn-outline-secondary"
							@onclick="TogglePasswordVisibility"
							tabindex="-1">
						<i class="bi @( showPassword ? "bi-eye-slash" : "bi-eye")"></i>
					</button>
				</div>
				<ValidationMessage For="@(() => registerModel.Password)" />
				<div class="form-text text-muted">
					Password must be at least 6 characters long and contain both uppercase and lowercase letters.
				</div>
			</div>


			<div class="mb-3">
				<label for="firstName" class="form-label">First name</label>
				<InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" placeholder="First name" />
				<ValidationMessage For="@(() => registerModel.FirstName)" />
			</div>

			<div class="mb-3">
				<label for="lastName" class="form-label">Last name</label>
				<InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" placeholder="Last name" />
				<ValidationMessage For="@(() => registerModel.LastName)" />
			</div>

			<div class="mb-3">
				<label for="phone" class="form-label">Phonenumber</label>
				<InputText id="phone" @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Phonenumber" />
				<ValidationMessage For="@(() => registerModel.PhoneNumber)" />
			</div>

			@if (isAdmin)
			{
				<div class="mb-3">
					<label for="role" class="form-label">Role</label>
					<InputSelect id="role" @bind-Value="registerModel.Role" class="form-select">
						<option value="">- Select role -</option>
						<option value="customer">Customer</option>
						<option value="admin">Admin</option>
						<option value="sales">Sales</option>
					</InputSelect>
					<ValidationMessage For="@(() => registerModel.Role)" />
				</div>
			}

			@if (!isAdmin)
			{
				<div class="form-check">
					<InputCheckbox @bind-Value="registerModel.AcceptTerms" class="form-check-input" />
					<label class="form-check-label">
						I agree to the <button type="button" class="btn btn-link p-0" @onclick="OpenTerms">Terms of Service</button>
					</label>
					@if (!string.IsNullOrEmpty(termsError))
					{
						<div class="text-danger">@termsError</div>
					}
				</div>
			}

			<button type="submit" class="btn btn-primary w-100">Register</button>
		</EditForm>
	</div>

	<div class="modal fade @(showTerms ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Terms of Service</h5>
					<button type="button" class="btn-close" @onclick="CloseTerms"></button>
				</div>
				<div class="modal-body">
					<p>
						Welcome to Gotorz! These Terms of Service govern your use of our application. <br /><br />
						Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
						quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
						Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
					</p>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary" @onclick="CloseTerms">Close</button>
				</div>
			</div>
		</div>
	</div>

}

@code {
	private RegisterDto registerModel = new();
	private string? ErrorMessage;
	private string? termsError;
	private bool isCheckingAccess = true;
	private bool isAdmin;
	private bool showPassword = false;
	private bool showTerms = false;


	private void OpenTerms() => showTerms = true;
	private void CloseTerms() => showTerms = false;

	private void TogglePasswordVisibility() => showPassword = !showPassword;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		isAdmin = user.IsInRole("admin");

		if (!isAdmin && user.Identity?.IsAuthenticated == true)
		{
			Navigation.NavigateTo("/");
			return;
		}

		isCheckingAccess = false;
	}

	private async Task HandleRegister()
	{
		ErrorMessage = null;
		termsError = null;

		if (isAdmin && string.IsNullOrWhiteSpace(registerModel.Role))
		{
			ErrorMessage = "Please select a role";
			return;
		}
		if (!isAdmin && !registerModel.AcceptTerms)
		{
			termsError = "You must accept the terms and conditions";
			return;
		}

		var (success, error) = await UserService.RegisterAsync(registerModel);

		if (success)
		{
			Navigation.NavigateTo("/login");
		}
		else
		{
			ErrorMessage = error;
		}
	}
}
