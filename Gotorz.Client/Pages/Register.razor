@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@using Gotorz.Shared.Models

<h3>Register</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <EditForm Model="registerModel" OnValidSubmit="HandleRegister" class="p-4 rounded border shadow-sm" style="min-width: 300px;">
        <div class="mb-3">
            <InputText @bind-Value="registerModel.Email" class="form-control" placeholder="Brugernavn" />
        </div>

        <div class="mb-3">
            <InputText @bind-Value="registerModel.Password" class="form-control" placeholder="Kodeord" type="password" />
        </div>

        <div class="mb-3">
            <InputText @bind-Value="registerModel.Password" class="form-control" placeholder="Kodeord" type="password" />
        </div>

        @if (isAdmin)
        {
            <div class="mb-3">
                <InputSelect @bind-Value="registerModel.Role" class="form-control">
                    <option value="">Vælg rolle</option>
                    <option value="customer">Customer</option>
                    <option value="admin">Admin</option>
                    <option value="sales">Sales</option>
                </InputSelect>
            </div>
        }

        <button type="submit" class="btn btn-primary w-100">Registrér</button>
    </EditForm>
</div>

@code {
    private RegisterDto registerModel = new();
    private string? ErrorMessage;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("admin");
    }

    private async Task HandleRegister()
    {
        var response = await Http.PostAsJsonAsync("api/account/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ErrorMessage = error;
        }
    }
}
