@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@using Gotorz.Shared.DTOs

@if (isCheckingAccess) {}
else
{
    <h3 class="text-center mb-4">Register</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger text-center">@ErrorMessage</div>
    }

    <div class="d-flex justify-content-center mt-5">
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="p-4 rounded border shadow" style="min-width: 350px;">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                    <InputText id="password"
                               @bind-Value="registerModel.Password"
                               class="form-control"
                               placeholder="Kodeord"
                               type="@(_showPassword ? "text" : "password")" />

                    <button type="button"
                            class="btn btn-outline-secondary"
                            @onclick="TogglePasswordVisibility"
                            tabindex="-1">
                        <i class="bi @( _showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => registerModel.Password)" />
                <div class="form-text text-muted">
                    Password must be at least 6 characters long and contain both uppercase and lowercase letters.
                </div>
            </div>


            <div class="mb-3">
                <label for="firstName" class="form-label">First name</label>
                <InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" placeholder="First name" />
                <ValidationMessage For="@(() => registerModel.FirstName)" />
            </div>

            <div class="mb-3">
                <label for="lastName" class="form-label">Last name</label>
                <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" placeholder="Last name" />
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>

            <div class="mb-3">
                <label for="phone" class="form-label">Phonenumber</label>
                <InputText id="phone" @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Phonenumber" />
                <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
            </div>

            @if (isAdmin)
            {
                <div class="mb-3">
                    <label for="role" class="form-label">Role</label>
                    <InputSelect id="role" @bind-Value="registerModel.Role" class="form-select">
                        <option value="">- Select role -</option>
                        <option value="customer">Customer</option>
                        <option value="admin">Admin</option>
                        <option value="sales">Sales</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => registerModel.Role)" />
                </div>
            }

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </div>
}

@code {
	private bool isCheckingAccess = true;
    private RegisterDto registerModel = new();
    private string? ErrorMessage;
    private bool isAdmin;
	private bool _showPassword = false;

	private void TogglePasswordVisibility() => _showPassword = !_showPassword;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("admin");

        if (!isAdmin && user.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
            return;
        }

        isCheckingAccess = false;
    }

    private async Task HandleRegister()
    {
        if (isAdmin && string.IsNullOrWhiteSpace(registerModel.Role))
        {
			ErrorMessage = "Please select a role";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/account/register", registerModel);
        var errorJson = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else if (errorJson.Contains("DuplicateEmail") || errorJson.Contains("DuplicateUserName"))
        {
            ErrorMessage = "This email is already in use";
        }
        else
        {
            ErrorMessage = "Something unexpected happened";
        }

    }
}
