@page "/admin/users"
@using Gotorz.Client.Services
@using Gotorz.Shared.DTOs
@using System.Security.Claims
@inject IUserService UserService

@* change or remove @page if you like (UserProfile.razor has a NavigateTo(/admin/users) marked with // HACK:) *@

@if (!isAccessChecked)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Checking access...</span>
    </div>
}
else if (!isAdmin)
{
    <div class="alert alert-danger text-center mt-4">
        You do not have permission to view this page.
    </div>
}
else
{
    <h3 class="text-center mb-4">User Management</h3>

    @if (users == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between mb-3">
            <select class="form-select me-2" @bind="selectedRoleFilter" style="width: 200px;">
                <option value="">All Roles</option>
                <option value="admin">Admin</option>
                <option value="sales">Sales</option>
                <option value="customer">Customer</option>
            </select>

            <input class="form-control" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" style="max-width: 300px;" />
        </div>

        @if (!FilteredUsers.Any())
        {
            <div class="alert alert-info text-center">No users match your search criteria.</div>
        }
        else
        {
            <table class="table table-striped table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Email</th>
                        <th>Full Name</th>
                        <th>Phone</th>
                        <th>Role</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in FilteredUsers)
                    {
                        var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
                        <tr>
                            <td>@user.Email</td>
                            <td>@user.FirstName @user.LastName</td>
                            <td>@user.PhoneNumber</td>
                            <td>@GetRoleDisplayName(roleClaim)</td>
                            <td class="text-nowrap">
                                <div class="d-flex gap-2">
                                    <a class="btn btn-sm btn-primary" href="@($"/profile/{user.UserId}")">Profile</a>
                                    <a class="btn btn-sm btn-outline-secondary"
                                       href="@($"/booking/customer/holiday-bookings?User={Uri.EscapeDataString(user.UserId)}")">
                                        Bookings
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}

@code {
    private List<UserDto>? users;
    private string? selectedRoleFilter = "";
    private string searchTerm = "";
    private bool isAdmin = false;
    private bool isAccessChecked = false;

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await UserService.IsUserInRoleAsync("admin");
        isAccessChecked = true;

        if (isAdmin)
        {
            users = await UserService.GetAllUsersAsync();
        }
    }

    private IEnumerable<UserDto> FilteredUsers => users!
        .Where(u =>
            (string.IsNullOrEmpty(selectedRoleFilter) || u.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == selectedRoleFilter)) &&
            (string.IsNullOrWhiteSpace(searchTerm) ||
             (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
              u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
              u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
              u.PhoneNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true))
        );

    private string GetRoleDisplayName(string? role) =>
        role switch
        {
            "sales" => "Sales Representative",
            "admin" => "Admin",
            "customer" => "Customer",
            _ => role ?? "Unknown"
        };
}
