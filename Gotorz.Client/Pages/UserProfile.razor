@page "/profile"
@page "/profile/{ProfileId}"
@using Gotorz.Client.Services
@using Gotorz.Shared.DTOs
@using System.Security.Claims
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="text-center mb-4">My Profile</h3>

@if (user == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!user.IsAuthenticated)
{
    <div class="alert alert-warning">
		Please log in to view your profile.
    </div>
}
else
{
    <div class="mx-auto" style="max-width: 500px;">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                Profile Information
            </div>
            <div class="card-body">
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">First name:</div>
                    <div class="col-sm-8">@user.FirstName</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Last name:</div>
                    <div class="col-sm-8">@user.LastName</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Email:</div>
                    <div class="col-sm-8">@user.Email</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Phonenumber:</div>
                    <div class="col-sm-8">@user.PhoneNumber</div>
                </div>

                @if (isAdmin == true || profileRole == "sales")
                {
                    <div class="row mb-2">
                        <div class="col-sm-4 fw-bold">Role:</div>
                        <div class="col-sm-8">
                            <span class="col-sm-8">@GetRoleDisplayName(profileRole)</span>
                        </div>
                    </div>
                }

                @if (isCurrentUseProfile || isAdmin)
                {
                    <div class="mt-4 text-center border-top pt-3">
                        <button class="btn btn-danger" @onclick="OpenModal">Delete Profile</button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>This action is permanent and cannot be undone.</p>
                    <p>To confirm, type <strong>DELETE</strong> below:</p>
                    <input @bind-Value="deleteInput"
                           @bind-Value:event="oninput"
                           class="form-control"
                           @ref="deleteInputRef" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger"
                            @onclick="DeleteUser"
                            disabled="@(!IsDeleteConfirmed || isDeleting)">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="visually-hidden">Deleting...</span>
                        }
                        else
                        {
                            <span>Confirm Delete</span>
                            }
                    </button>

                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string? ProfileId { get; set; }

    private UserDto? user;
    private string? profileRole;
    private bool isAdmin;
    private bool isCurrentUseProfile;
    private string? currentUserId;
    private bool showDeleteModal = false;
    private string deleteInput = string.Empty;
    private ElementReference deleteInputRef;
	private bool isDeleting = false;

    protected override async Task OnParametersSetAsync()
    {
        isAdmin = await UserService.IsUserInRoleAsync("admin");

        var currentUser = await UserService.GetCurrentUserAsync();
        currentUserId = currentUser?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (isAdmin && !string.IsNullOrWhiteSpace(ProfileId) && ProfileId != currentUserId)
        {
            user = await UserService.GetUserByIdAsync(ProfileId);
        }
        else
        {
            user = currentUser;
            ProfileId = currentUserId;
        }

        profileRole = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        isCurrentUseProfile = ProfileId == currentUserId;
    }

    private string GetRoleDisplayName(string? role) => 
    role switch { "sales" => "Sales Representative", "admin" => "Admin", "customer" => "Customer", _ => role ?? "Unknown" };

    private async Task DeleteUser()
    {
        if (string.IsNullOrEmpty(ProfileId))
        {
            Console.WriteLine("No valid user ID to delete.");
            return;
        }

		isDeleting = true;

        bool success = isCurrentUseProfile ? await UserService.DeleteCurrentUserAsync() : await UserService.DeleteUserAsync(ProfileId);

		isDeleting = false;

        if (success)
        {
            if (isCurrentUseProfile)
            {
                await UserService.LogoutAsync();
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/", forceLoad: true); // HACK: Load the correct path (Admin dashboard maybe) when deleting a user that isn't currentUser
            }
        }
        else
        {
            // TODO: handle failure
        }
    }

    private bool IsDeleteConfirmed => deleteInput == "DELETE";

    private async void OpenModal()
    {
        deleteInput = string.Empty;
        showDeleteModal = true;

        await Task.Yield();
        await Task.Delay(50);
        await deleteInputRef.FocusAsync();
    }

    private void CloseModal()
    {
        showDeleteModal = false;
    }
}

