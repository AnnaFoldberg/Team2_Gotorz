@page "/profile"
@page "/profile/{ProfileId}"
@using Gotorz.Client.Services
@using Gotorz.Shared.DTOs
@using System.Security.Claims
@inject IUserService UserService
@inject NavigationManager Navigation

<h3 class="text-center mb-4">My Profile</h3>

@if (user == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!user.IsAuthenticated)
{
    <div class="alert alert-warning">
		Please log in to view your profile.
    </div>
}
else
{
    <div class="mx-auto" style="max-width: 500px;">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                Profile Information
            </div>
            <div class="card-body">
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">First name:</div>
                    <div class="col-sm-8">@user.FirstName</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Last name:</div>
                    <div class="col-sm-8">@user.LastName</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Email:</div>
                    <div class="col-sm-8">@user.Email</div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 fw-bold">Phonenumber:</div>
                    <div class="col-sm-8">@user.PhoneNumber</div>
                </div>

                @if (isAdmin == true || profileRole == "sales")
                {
                    <div class="row mb-2">
                        <div class="col-sm-4 fw-bold">Role:</div>
                        <div class="col-sm-8">
                            <span class="col-sm-8">@GetRoleDisplayName(profileRole)</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? ProfileId { get; set; }

    private UserDto? user;
    private string? profileRole;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await UserService.IsUserInRoleAsync("admin");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ProfileId) && isAdmin)
        {
            user = await UserService.GetUserByIdAsync(ProfileId);
        }
        else
        {
            user = await UserService.GetCurrentUserAsync();
            Navigation.NavigateTo("/profile");
        }

        profileRole = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
    }

    private string GetRoleDisplayName(string? role) => 
    role switch { "sales" => "Sales Representative", "admin" => "Admin", "customer" => "Customer", _ => role ?? "Unknown" };
}

