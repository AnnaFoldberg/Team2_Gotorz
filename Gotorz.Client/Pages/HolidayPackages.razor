@page "/holidaypackage"
@using Gotorz.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@using Gotorz.Client.Services
@using Gotorz.Client.ViewModels
@inject HolidayPackageService PackageService


<AuthorizeView>
    <Authorized Context="auth">
        @if (auth.User.IsInRole("sales"))
        {
            <h2 class="text-2xl font-bold mb-4">Holiday packages</h2>


            <hr class="my-6" />

            <h3 class="text-xl font-semibold mb-2">Create a new holiday package</h3>


            <EditForm Model="newPackage" OnValidSubmit="CreatePackage">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 w-50">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" @bind-Value="newPackage.Title" class="form-control" />
                </div>

                <div class="mb-3 w-50">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" @bind-Value="newPackage.Description" class="form-control" rows="4" />
                </div>

                <div class="d-flex align-items-center gap-3 mb-3">
                    <button type="submit" class="btn btn-primary">
                        Create
                    </button>

                    @if (showSuccessMessage)
                    {
                        <div class="alert alert-success mb-0 py-1 px-3" role="alert">
                            Holiday package created successfully!
                        </div>
                    }
                </div>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        <div class="mt-5 flights-page-wrapper">
            <Login />
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    //private List<HolidayPackageDto> packages = new();
    private HolidayPackageDto newPackage = new();
    private bool showSuccessMessage = false;


    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadPackages();
    // }

    /*
    private async Task LoadPackages()
    {
        packages = await PackageService.GetAllAsync();
        }
    */

    private async Task CreatePackage()
    {
        await PackageService.CreateAsync(newPackage);

        showSuccessMessage = true;
        newPackage = new HolidayPackageDto();
        StateHasChanged();
    }

    // private async Task DeletePackage(int id)
    // {
    //     await PackageService.DeleteAsync(id);
    //     var toRemove = packages.FirstOrDefault(p => p.Id == id);
    //     if (toRemove is not null)
    //     {
    //         packages.Remove(toRemove);
    //     }
    // }
}

    z