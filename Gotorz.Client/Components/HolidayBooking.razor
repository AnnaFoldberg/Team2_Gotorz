@using Gotorz.Shared.DTOs
@using Gotorz.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject IBookingService BookingService
@inject IUserService UserService
@inject ILogger<HolidayBooking> Logger

<AuthorizeView>
    <Authorized Context="auth">
        @if (!isAuthorizedUser)
        {
            <p>Page not found.</p>
        }
        else if (HolidayBookingDto?.HolidayPackage == null || travellers == null )
        {
            <p>Loading ...</p>
        }
        else
        {
            <div class="d-flex justify-content-between">
                <div class="p-2 flex-fill">
                    <h5><b>Holiday Booking</b></h5>
                    <p>@HolidayBookingDto.HolidayPackage.Title</p>
                </div>
                <div class="card bg-light border-light p-2 mb-3">
                    <div class="card-body">
                        <h6 class="card-title text-dark">Travellers</h6>
                        @foreach(var traveller in travellers)
                        {
                            <p class="card-text small">@traveller.Name. Age: @traveller.Age<br>
                            Passport number: @traveller.PassportNumber</p>
                        }
                    </div>
                </div>
            </div>
        }
</Authorized>
    <NotAuthorized>
        <div class="mt-5 standard-page-wrapper">
            <Login/>
        </div>
    </NotAuthorized>
</AuthorizeView>
 

@code {
    private bool isAuthorizedUser;
    private UserDto currentUser;
    private IEnumerable<TravellerDto>? travellers;
    private HolidayPackageDto? holidayPackage;

    [Parameter]
    public HolidayBookingDto HolidayBookingDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (HolidayBookingDto == null) return;

            currentUser = await UserService.GetCurrentUserAsync();

            isAuthorizedUser = ((await UserService.IsUserInRoleAsync("customer")) &&
                HolidayBookingDto.Customer.Email == currentUser.Email ) ||
                (await UserService.IsUserInRoleAsync("sales")) ||
                (await UserService.IsUserInRoleAsync("admin"));

            if (!isAuthorizedUser) return;
            
            holidayPackage = HolidayBookingDto.HolidayPackage;
            travellers = await BookingService.GetTravellersAsync(HolidayBookingDto.BookingReference);
        }
      catch (Exception ex)
      {
          Logger.LogError(ex, "Error initializing holiday booking");
      }
    }
}