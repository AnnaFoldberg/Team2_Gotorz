@using Gotorz.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@using Gotorz.Client.Services
@using Gotorz.Client.ViewModels
@inject IFlightService FlightService
@inject IUserService UserService
@inject ILogger<Flights> Logger

<AuthorizeView>
    <Authorized Context="auth">
        @if (!isAuthorizedUser)
        {
            <p>Page not found.</p>
        }
        else if (airports == null)
        {
            <p>Loading ...</p>
        }
        else
        {
            <div class="container block-wrapper">
                <EditForm Model="@searchForm" OnValidSubmit="SearchAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="container">
                        <div class="d-flex gap-2 align-items-end">
                            <div class="form-group flex-grow-1">
                                <label for="departureAirport" class="form-label">Departure Airport</label>
                                <InputText class="form-control" id="departureAirport" @bind-Value="searchForm.DepartureAirport" list="departure-options" />
                                <datalist id="departure-options">
                                    @foreach (var airport in airports)
                                    {
                                        <option value="@airport.LocalizedName"></option>
                                    }
                                </datalist>
                            </div>
                            <div class="form-group flex-grow-1">
                                <label for="arrivalAirport" class="form-label">Arrival Airport</label>
                                <InputText class="form-control" id="arrivalAirport" @bind-Value="searchForm.ArrivalAirport" list="arrival-options" />
                                <datalist id="arrival-options">
                                    @foreach (var airport in airports)
                                    {
                                        <option value="@airport.LocalizedName"></option>
                                    }
                                </datalist>
                            </div>
                            <div class="form-group flex-grow-1">
                                <label for="date" class="form-label">Date (optional)</label>
                                <InputText class="form-control" id="date" @bind-Value="searchForm.Date" placeholder="dd-MM-yyyy" />
                            </div>
                            <div class="form-group flex-grow-1">
                                <button type="submit" class="btn icon-white h-100 custom-background text-white bi bi-search"></button>
                            </div>
                        </div>
                    </div>
                </EditForm>

                <br><br>

                @if (flights != null && searchPerformed)
                {
                    if (flights.Any())
                    {
                        <ul class="list-group">
                            <li class="list-group-item d-flex align-items-center text-white custom-background">
                                <span style="flex: 0 0 15%; text-align: left;">Departure Date</span>
                                <span style="flex: 0 0 25%; text-align: left;">Departure Airport</span>
                                <span style="flex: 0 0 25%; text-align: left;">Arrival Airport</span>
                                <span style="flex: 0 0 10%; text-align: right; padding-right: 10px;">Ticket Price</span>
                                <div class="d-flex align-items-center ms-auto">
                                    <span class="text-center" style="width: 10px;"></span>
                                    <span class="text-center" style="width: 70px;">Quantity</span>
                                    <span class="text-center" style="width: 10px;"></span>
                                </div>
                            </li>

                            @foreach (var flight in flights)
                            {
                                <li class="list-group-item d-flex align-items-center" >
                                    <span style="flex: 0 0 15%; text-align: left;">@flight.DepartureDate.ToString("dd-MM-yyyy")</span>
                                    <span style="flex: 0 0 25%; text-align: left;">@flight.DepartureAirport.LocalizedName</span>
                                    <span style="flex: 0 0 25%; text-align: left;">@flight.ArrivalAirport.LocalizedName</span>
                                    <span style="flex: 0 0 10%; text-align: right; padding-right: 10px;">@flight.TicketPrice USD</span>
                                    <div class="d-flex align-items-center ms-auto">
                                        <span class="d-flex justify-content-center align-items-center" style="width: 40px;">
                                            <button type="button" class="btn btn-icon" @onclick="() => RemoveFlightTicket(flight)" disabled="@(GetFlightTicketCount(flight) == 0)">
                                                <i class="bi bi-dash-square-fill bg-purple fs-4"></i>
                                            </button>
                                        </span>
                                        <span class="d-flex justify-content-center align-items-center" style="width: 30px;">@GetFlightTicketCount(flight)</span>
                                        <span class="d-flex justify-content-center align-items-center" style="width: 40px;">
                                            <button type="button" class="btn btn-icon" @onclick="() => AddFlightTicket(flight)">
                                                <i class="bi bi-plus-square-fill bg-purple fs-4"></i>
                                            </button>
                                        </span>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No flights were found</p>
                    }
                }
                <br><br><br>
                <div class="container mb-4">
                    <div class="d-flex justify-content-between align-items-center p-3 border rounded bg-white shadow">
                        <p class="mb-0 flex-grow-1">@($"{flightTickets.Count} ticket(s) selected")</p>
                        <button class="btn btn-light custom-background text-white" @onclick="ConfirmFlightTicketsAsync">Confirm</button>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="mt-5 standard-page-wrapper">
            <Login/>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isAuthorizedUser;
    private bool searchPerformed = false;
    private SearchForm searchForm = new SearchForm();
    private IEnumerable<AirportDto> airports = Enumerable.Empty<AirportDto>();
    private List<FlightDto> flights = new List<FlightDto>();
    private List<FlightTicketDto> flightTickets = new List<FlightTicketDto>();

    [Parameter]
    public EventCallback<List<FlightTicketDto>> OnFlightTicketsConfirmed { get; set; }
    
    protected override async Task OnInitializedAsync()
    {        
        isAuthorizedUser = await UserService.IsUserInRoleAsync("sales");
        if (!isAuthorizedUser) return;

        airports = await FlightService.GetAllAirportsAsync();
    }

    private async Task SearchAsync()
    {
        try
        {
            var result = await FlightService.GetFlightsAsync(searchForm.Date, searchForm.DepartureAirport, searchForm.ArrivalAirport);

            if (result == null)
            {
                flights = new List<FlightDto>();
                return;
            }

            flights = result;
            airports = await FlightService.GetAllAirportsAsync();
            searchPerformed = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching flights");
        }
    }

    private int GetFlightTicketCount(FlightDto flight)
    {
        return flightTickets.Count(f => f.Flight == flight);
    }

    private void AddFlightTicket(FlightDto flight)
    {
        flightTickets.Add(new FlightTicketDto { Price = flight.TicketPrice, Flight = flight });
    }

    private void RemoveFlightTicket(FlightDto flight)
    {
        var flightTicket = flightTickets.FirstOrDefault(f => f.Flight == flight);
        flightTickets.Remove(flightTicket);
    }

    private async Task ConfirmFlightTicketsAsync()
    {
        try
        {
            if (flightTickets != null && flightTickets.Any())
            {
                await OnFlightTicketsConfirmed.InvokeAsync(flightTickets);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error committing tickets");
        }
    }
}